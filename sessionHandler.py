import os
from orgutils import orgutils
from datetime import datetime as dt

def instantiateSession(args):
    if not os.path.isfile('.nwb.org'):
        print('NWBORG ERROR: not in the uppermost folder of an nwborg project.')
        return
    
    session_skeletons = orgutils.orgToDict(filename='sessionskeletons.org')
    print('args:', args)
    session_archetype = args[0]
    skeleton = session_skeletons[session_archetype]
    for role in skeleton['subject roles'].keys():
        subject_id = input('Please enter a subject id to fill the role of ' + str(role) + ' in this session...')
        print('Proceeding with subject id ' + subject_id + ' filling the roll of ' + role + '...')
        # ACTUAL TODO error handling for input here
        skeleton[role] = dict()
        skeleton['subject roles'][role]['subject id'] = subject_id
                
    if not os.path.isdir('sessions/' + session_archetype):
        print('creating sessions directory...')
        os.mkdir('sessions/' + session_archetype)
        print('complete.')

    session_id = input('Please input the session\'s ID, or press enter to autogenerate a new ID')
    if session_id == '':
        session_files = os.listdir('sessions/' + session_archetype)
        largest_id = 0
        for session_file in session_files:
            if '.' in session_file:
                continue
            session_num = int(session_file)
            if session_num > largest_id:
                largest_id = session_num
        new_id = largest_id + 1
        preceding_zeroes = ''
        if new_id < 1000:
            preceding_zeroes += '0'
        if new_id < 100:
            preceding_zeroes += '0'
        if new_id < 10:
            preceding_zeroes += '0'
        session_id = preceding_zeroes + str(new_id)

    if not os.path.isdir('sessions/' + session_archetype + '/' + session_id):
        print('creating directory for session ' + session_id + '...')
        os.mkdir('sessions/' + session_archetype + '/' + session_id)
        print('complete.')

    print('Proceeding with id ' + session_id + ' for session creation...')
    session_dict = dict()
    session_dict['subject roles'] = skeleton['subject roles']
    session_dict['date'] = input('Please input the date expected for this session to be recorded(ex. 08/11/1998)...')
    session_dict['session supervisor'] = input('Please input the name of the experimenter responsible for this session being recorded...')
    orgutils.dictToOrg(org_data=session_dict,output_filename='sessions/' + session_archetype + '/' + session_id + '/session.org')
    print('session info saved to sessions/' + session_archetype + '/' + session_id + '/' + 'session.org')


    # Read in the hardware configs for the sensors pertaining to the different roles
    hardware_used = dict()
    for role in session_dict['subject roles'].keys():
        hardware_used[role] = session_dict['subject roles'][role]['sensors']
    
        
    # source code generation 
    print(session_archetype + '/run.py not found... generating now....')
    tab = '    '
    half_tab = '  '
    with open('sessions/' + session_archetype + '/run.py', 'w') as f:
        # autogenerated nwb initializations
        # imports        
        f.write("import pynwb\n")
        f.write("from pynwb import NWBFile\n")
        f.write("from datetime import datetime\n")
        f.write("from orgutils import orgutils\n")
        f.write("import argparse\n")
        f.write("def main():\n")
        f.write(tab+"overview = orgutils.orgToDict(filename=overview.org)\n")
        f.write(tab+"skeleton = orgutils.orgToDict(filename=sessionskeletons.org)['" + session_archetype + "']\n")
        f.write(tab+"nwbfile = NWBFile(session_description=skeleton['description'],identifier='"+str(session_id)+"',session_start_time=datetime.now(),file_create_date=datetime.today())\n")
        f.write(tab+"parser = argparse.ArgumentParser('Default parser generated automatically by nwborg')\n")
        f.write(tab+'session_dict = orgutils.orgToDict(filename=session.org)\n')
        f.write(tab+"session_id = session_dict['session id']\n") # There's going to be light debugging here at some point
        # pick it up
        
        
        # user defined additions to the source code
        # one at a time add the sensors and add prompts to the file ensuring

        for role in hardware_used.keys():
            print('initializing sensors for the ' + role + '...')
            sensor = hardware_used[role]
            config = orgutils.orgToDict(filename='sensors/' + sensor + '.org')
            #for sensor in hardware_used[role]:

            initialization_code = config['programmatic']['initial']
            for statement in initialization_code:
                statement = statement.replace('ROLE',role)
                f.write(half_tab + statement+'\n')
        # TODO here make sure to read and insert the code that comes from the
        # session skeleton itself
        for statement in skeleton['programmatic']['initial']:
            f.write(half_tab + statement+'\n')            
        f.write(tab + 'try:\n')
        f.write((tab * 2) + 'while(True):\n')
        
        for role in hardware_used.keys():
            print('initializing sensors for the ' + role + '...')
            #for sensor in hardware_used[role]:
            sensor = hardware_used[role]
            config = orgutils.orgToDict(filename='sensors/' + sensor + '.org')
            initialization_code = config['programmatic']['loop']
            for statement in initialization_code:
                statement = statement.replace('ROLE',role)
                f.write(tab * 2 + half_tab + statement+'\n')
                    
        for statement in skeleton['programmatic']['loop']:
            f.write(tab * 2 + half_tab + statement+'\n')

        f.write(tab + 'except:\n')
        f.write(tab * 2 + 'print("recording complete")\n')
        for role in hardware_used.keys():
            print('initializing sensors for the ' + role + '...')
            #for sensor in hardware_used[role]:
            sensor = hardware_used[role]
            config = orgutils.orgToDict(filename='sensors/' + sensor + '.org')
            initialization_code = config['programmatic']['terminal']
            for statement in initialization_code:
                statement = statement.replace('ROLE',role)
                f.write(tab + half_tab + statement+'\n')
        
        for statement in skeleton['programmatic']['terminal']:
            f.write(tab + half_tab + statement+'\n')
            
        # autogenerated nwb recordings
        f.write("nwbfile.add_acquisition_or_whatever\n")
        

        # vvvvvvvv This should be the last step in the code generation process vvvvvvvv
        # Make callable from terminal and add call to main
        f.write("if __name__ == '__main__':\n")
        f.write(tab + "main()\n")
                
